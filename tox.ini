;region  ================================ configuration ================================

;region  =================================== black =====================================

[tool.black]
line-length = 79
target-version = py36,
quiet = true

;endregion ================================= black =====================================

;region  ============================== flake8 & autopep8 ==============================

[flake8]
max-line-length = 79
ignore =
  # line too long handled by pylint
  E501,
  # unused import handled by pylint
  F401,
  # function-redefined handled by pylint
  F811,
  # singleton-comparison handled by pylint
  E712,
  # w503 incompatible with pep8
  W503
show_source = true
statistics = true
exclude =
  .git,
  logs,
  dist,
  .vscode,
  .venv,
  .tox,
  pip-wheel-metadata,
  .mypy-cache,
  .hypothesis,
  **/__pycache__,
  docs/source/conf.py,
  **/*.bkp
  petri.egg-info,
  data
;region  ======================= autopep8 =======================
in-place = true
recursive = true
;endregion ===================== autopep8 =======================

;endregion ============================ flake8 & autopep8 ==============================

;region  ==================================== mypy =====================================

[mypy]
ignore_missing_imports = True
python_version = 3.6

;endregion ================================== mypy =====================================

;region  ==================================== isort ====================================

[isort]
line_length=79
force_single_line=True
sections=FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER
no_lines_before=STDLIB,LOCALFOLDER

;endregion ================================== isort ====================================

;region  =================================== behave ====================================

[behave]
color = True
; junit = True
; junit_directory = data/reports
paths = tests/features
; show_timings = False
summary = True
; quiet = True
; show_snippets = True
; expand = False
lang = es
; default_format = progress
format=rerun

;endregion ================================= behave ====================================

;region  =================================== bandit ====================================

[bandit]
skips=B101

;endregion ================================= bandit ====================================


;region  =================================== pylint ====================================

[MASTER]

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-whitelist=pydantic

[MESSAGES CONTROL]
disable =
  # black takes care of C0330. See: https://github.com/python/black/issues/48
  C0330,
  # R0801 does not like imports in init
  R0801

[FORMAT]
# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=\s*(# )?<?https?://\S+>?
indent-string = "    "
good-names =
  db

[MISCELLANEOUS]
# List of note tags to take in consideration, separated by a comma.
notes=
  FIXME,

;endregion ================================= pylint ====================================

;endregion ============================== configuration ================================

;region  ==================================== tox =====================================
[tox]
envlist =
  format, lint,
  TODO,
  codetest,
  docs,
  reqs,
  docker
skipsdist = True
skip_install = True

[testenv]
skip_install = true
whitelist_externals = poetry
                      python
                      autopep8
                      black
                      pylint
                      flake8
                      mypy
                      bandit
                      sphinx-build
                      docker-compose
envdir = {toxinidir}/.venv
basepython = python3.6
commands =
  python -c \
    "from pathlib import Path ; \
    from shutil import rmtree ; \
    rmtree(Path('pip-wheel-metadata'), ignore_errors=True) ; \
    rmtree(Path('petri.egg-info'), ignore_errors=True) ; \
    "
  poetry install {posargs} -vvv
list_dependencies_command = python -c "print(' -------------- O -------------- ')"

[testenv:venv]
recreate = False
description = "Install dependencies for application dev, w/o running tests"

[testenv:clear]
description = "Delete all temp and intermediate files."
commands =
  python -c \
    "from pathlib import Path ; \
    rm = lambda p: p.unlink() if p.is_file() else sum(rm(pp) or 0 for pp in p.iterdir()) ; \
    [rm(f) for f in Path('{toxinidir}').glob('docs/source/**/*.rst')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('docs/build/**/*.*')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('.mypy_cache')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('.tox')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('petri.egg-info')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('dist')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('logs/**/*.*')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('**/__pycache__')] ; \
    "

;region  ================================= formatting ==================================

[testenv:autopep8]
description = "Reformat code using autopep8 formatte"
commands = autopep8 petri

[testenv:isort]
description = "Reformat code using isort"
commands = isort -rc --atomic petri

[testenv:black]
description = "Reformat code using black formatter"
commands = 
  black --config tox.ini petri

[testenv:docformatter]
description = "Reformat code using docformatter formatter"
commands =
  docformatter --in-place --recursive --wrap-summaries 0 --blank petri

[testenv:format]
description = "Reformat code using isort,autopep8,black formatter(s)"
commands =
  {[testenv:autopep8]commands}
  {[testenv:isort]commands}
  {[testenv:black]commands}
  {[testenv:docformatter]commands}

;endregion =============================== formatting ==================================

;region  =================================== linting ===================================
[testenv:flake8]
description = "Lint code using flake8"
commands =
  flake8 --config=tox.ini petri

[testenv:pylint]
description = "Lint code using pylint"
commands =
  pylint --rcfile=tox.ini petri

[testenv:mypy]
description = "Lint code using mypy"
commands =
  mypy --config-file=tox.ini -p petri

[testenv:bandit]
description = "Lint code using bandit"
commands =
  bandit \
    --ini=tox.ini \
    --quiet \
    --recursive \
    -x **/.venv/**/*.py \
    petri

[testenv:lint]
description = "Lint code using flake8,pylint,mypy, and bandit linters"
whitelist_externals = tox
commands =
  {[testenv:flake8]commands}
  {[testenv:mypy]commands}
  {[testenv:bandit]commands}
  {[testenv:pylint]commands}

[testenv:TODO]
description = "Lint code using flake8,pylint,mypy,bandit linter"
commands =
  - pylint \
    --disable=all \
    --enable=W0511 \
    --notes=WTF,FIXME,TODO,BUG,NOBUG,REQ,RFE,IDEA,ALERT,HACK,PORT,CAVEAT,NOTE,REF,TODOC,CRED \
    petri

;endregion ================================= linting ===================================

;region  ================================ code testing =================================

[testenv:formattest]
description = "Reformat testing code using autopep8,black formatter(s)"
commands =
  autopep8 tests
  black tests

[testenv:linttest]
description = "Lint test code using flake8,pylint,mypy,bandit linter(s)"
commands =
  flake8 --config=tox.ini tests
  pylint --rcfile=tox.ini tests \
    --disable=C011
  mypy --config-file=tox.ini -p tests
  bandit \
    --ini=tox.ini \
    --quiet \
    --recursive \
    -x **/.venv/**/*.py \
    tests



[testenv:unit]
description = "Run unit tests"
setenv =
    COVERAGE_FILE = .coverage.unit
commands =
  pytest {posargs} -v --tb=short -ra --cov=petri tests/unit

[testenv:docker]
description = "Run tests using docker"
whitelist_externals = docker-compose
changedir = docker
commands =
    docker-compose down -v
    python -c \
      "from sys import exit ; \
      from dotenv.main import set_key ; \
      from toml import loads ; \
      pyproject = loads(open('../pyproject.toml','r').read()) ; \
      version = pyproject['tool']['poetry']['version'] ; \
      r,var,val = set_key('./.env', 'PETRI_VERSION', version, False) ; \
      exit(0 if r==True else 1) ; \
      "
    docker-compose build --no-cache publisher
    docker-compose build --no-cache a_pkg
    docker-compose build --no-cache second_order
    docker-compose up publisher
    docker-compose up a_pkg
    docker-compose up second_order

[testenv:coverage]
description = "Report Coverage results by aggregating tests results"
commands =
  - python -c \
    "from pathlib import Path ;" \
    "Path('.coverage').unlink()"
  - coverage combine \
    -a .coverage.unit \
    -a docker/.coverage.publish \
    -a docker/.coverage.pkg \
    -a docker/.coverage.second_hand
  coverage html -d docs/build/coverage
  coverage xml


[testenv:codetest]
description = "test package after formatting and linting tests"
whitelist_externals = tox
commands =
  {[testenv:formattest]commands}
  {[testenv:linttest]commands}
  {[testenv:unit]commands}
  {[testenv:coverage]commands}
;endregion ============================== code testing =================================

;region  ================================ documentation ================================

[testenv:builddocs]
description = "Invoke sphinx-build to build the HTML docs"
setenv =
  LOG_LEVEL = 50
commands =
  sphinx-build \
    ; -Q \
    -d "{toxinidir}/docs/build/.doctrees" \
    --color \
    -E \
    -a \
    -bhtml \
    "{toxinidir}/docs/source" \
    "{toxinidir}/docs/build"

[testenv:testdocs]
description = "Invoke doc8 to check the rst docs"
commands = doc8 -q "{toxinidir}/docs"

[testenv:docs]
description = "create & test documentation"
commands =
  {[testenv:clear]commands}
  {[testenv:builddocs]commands}
  {[testenv:testdocs]commands}

;endregion ============================== documentation ================================

;region  ================================ code sharing =================================

[testenv:reqs]
description = "Export requiremets.txt"
whitelist_externals = 
  dephell,
  poetry
commands =
  poetry lock
  poetry export \
    -n \
    --dev \
    --without-hashes \
    --with-credentials \
    -E schemadisplay \
    -f requirements.txt \
    -o requirements.dev.txt
  poetry export \
    -n \
    --without-hashes \
    --with-credentials \
    -f requirements.txt \
    -o requirements.txt
  dephell deps convert

;endregion ============================== code sharing =================================

;endregion =================================== tox =====================================
