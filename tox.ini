;region  ================================ configuration ================================

;region  =================================== black =====================================

[tool.black]
line-length = 79
target-version = py36,
quiet = true

;endregion ================================= black =====================================

;region  ============================== flake8 & autopep8 ==============================

[flake8]
max-line-length = 79
ignore =
  # line too long handled by pylint
  E501,
  # unused import handled by pylint
  F401,
  # function-redefined handled by pylint
  F811,
  # singleton-comparison handled by pylint
  E712,
  # w503 incompatible with pep8
  W503
show_source = true
statistics = true
exclude =
  .git,
  logs,
  dist,
  .vscode,
  .venv,
  .tox,
  pip-wheel-metadata,
  .mypy-cache,
  .hypothesis,
  **/__pycache__,
  docs/source/conf.py,
  **/*.bkp
  petri.egg-info,
  data
;region  ======================= autopep8 =======================
in-place = true
recursive = true
;endregion ===================== autopep8 =======================

;endregion ============================ flake8 & autopep8 ==============================

;region  ==================================== mypy =====================================

[mypy]
ignore_missing_imports = True
python_version = 3.6

;endregion ================================== mypy =====================================

;region  ==================================== isort ====================================

[isort]
line_length=79
force_single_line=True
sections=FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER
no_lines_before=STDLIB,LOCALFOLDER

;endregion ================================== isort ====================================

;region  =================================== pytest ====================================

[pytest]
addopts =
  -v
  --tb=short
  -ra
  --cov=petri
  --html=docs/build/pytest.html --self-contained-html
  tests

;endregion ================================= pytest ====================================

;endregion ============================== configuration ================================

;region  ==================================== tox ======================================
[tox]
isolated_build = true
envlist =
  format,
  codetest

[testenv]
envdir = {toxinidir}/.venv
skip_install = true
skipdist = True
whitelist_externals = poetry
basepython = python3.7
commands =
  {[testenv:clear]commands}
  pip install --upgrade pip
  poetry install -vvv -E docs
list_dependencies_command = poetry show
recreate = False

[testenv:venv]
description = "Install dependencies for development, without running tests"

[testenv:clear]
description = "Delete all temp and intermediate files."
commands =
  python3 -c \
    "from pathlib import Path ; \
    from shutil import rmtree ; \
    rm = lambda p: p.unlink() if p.is_file() else rmtree(p) ; \
    [rm(f) for f in Path('{toxinidir}').glob('docs/source/**/*.rst')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('docs/build/**/*.*')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('**/.mypy_cache')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('**/.tox')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('petri.egg-info')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('examples/**/*.egg-info')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('examples/**/*.dist-info')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('dist')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('logs/**/*.*')] ; \
    [rm(f) for f in Path('{toxinidir}').glob('**/__pycache__')] ; \
    "

;region  ================================= formatting ==================================

[testenv:autopep8]
description = "Reformat code using autopep8 formatte"
commands = autopep8 petri

[testenv:isort]
description = "Reformat code using isort"
commands = isort -rc --atomic petri

[testenv:black]
description = "Reformat code using black formatter"
commands = 
  black --config tox.ini petri

[testenv:docformatter]
description = "Reformat code using docformatter formatter"
commands =
  docformatter --in-place --recursive --wrap-summaries 0 --blank petri

[testenv:format]
description = "Reformat code using isort,autopep8,black formatter(s)"
commands =
  {[testenv:autopep8]commands}
  {[testenv:isort]commands}
  {[testenv:black]commands}
  {[testenv:docformatter]commands}

;endregion =============================== formatting ==================================

;region  ================================ code testing =================================

[testenv:unit]
description = "Run unit tests"
setenv =
    COVERAGE_FILE = .coverage.unit
commands =
  pytest tests/unit

[testenv:coverage]
description = "Report Coverage results by aggregating tests results"
commands =
  - python -c \
    "from pathlib import Path ;" \
    "Path('.coverage').unlink()"
  - coverage combine \
    -a .coverage.unit
    ; -a docker/.coverage.publish \
    ; -a docker/.coverage.pkg \
    ; -a docker/.coverage.second_hand
  coverage html -d docs/build/coverage
  coverage xml

[testenv:codetest]
description = "Run all code tests"
passenv =
    DISPLAY
commands =
  {[testenv:unit]commands}
  {[testenv:coverage]commands}
  ; - xdg-open docs/build/pytest.html
  ; - xdg-open docs/build/coverage/index.html

;endregion ============================== code testing =================================


;endregion =================================== tox =====================================
