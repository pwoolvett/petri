################################# flake8 and autopep8 #################################
[flake8]
max-line-length = 79
ignore =
  # line too long handled by pylint
  E501,
  # unused import handled by pylint
  F401,
  # singleton-comparison handled by pylint
  E712,
  # w503 incompatible with pep8
  W503
show_source = true
statistics = true
exclude =
  .git,
  logs,
  dist,
  .vscode,
  .venv,
  .tox,
  pip-wheel-metadata,
  .mypy-cache,
  .hypothesis,
  **/__pycache__,
  docs/source/conf.py,
  **/*.bkp
  petri.egg-info,
  data
# autopep8
in-place = true
recursive = true

######################################## mypy ##########################################
[mypy]
ignore_missing_imports = True
python_version = 3.6

####################################### bandit #########################################

[bandit]
skips = B101

######################################## pylint ########################################
[MASTER]

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-whitelist=pydantic
[MESSAGES CONTROL]
disable =
  # black takes care of C0330. See: https://github.com/python/black/issues/48
  C0330,
  # R0801 does not like imports in init
  R0801
todo = remove

[FORMAT]
# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=\s*(# )?<?https?://\S+>?
indent-string = "    "
good-names =
  db,


[MISCELLANEOUS]
# List of note tags to take in consideration, separated by a comma.
# All of these will error the testenv. To check exhaustively, run the `TODO` testenv.
notes=FIXME,TODO

################################# tox-specific ################################
[tox]
envlist =
  format,
  flake8, pylint, mypy, bandit,
  TODO,
  formattest, linttest,
  unit, coverage,
  srcdocs, testdocs, builddocs, reqs
skipsdist = True
skip_install = True

[testenv]
skip_install = true
whitelist_externals = poetry
                      python
                      autopep8
                      black
                      pylint
                      flake8
                      mypy
                      bandit
                      sphinx-build
                      docker
                      bash
                      tox
envdir = {toxinidir}/.venv
basepython = python3.6
commands =
  python -c \
    "from pathlib import Path ; \
    from shutil import rmtree ; \
    rmtree(Path('pip-wheel-metadata'), ignore_errors=True) ; \
    rmtree(Path('petri.egg-info'), ignore_errors=True) ; \
    "
  poetry install {posargs} -vvv
list_dependencies_command = python -c "print(' -------------- O -------------- ')"

[testenv:venv]
recreate = False
description = "Install dependencies for application dev, w/o running tests"


[testenv:format]
description = "Reformat code using isort,autopep8,black formatter(s)"
commands =
  autopep8 petri
  black petri
  docformatter \
    --in-place \
    --recursive \
    --wrap-summaries 0 \
    --blank \
    petri
todo = remove

[testenv:flake8]
description = "Lint code using flake8"
commands =
  flake8 --config=tox.ini petri

[testenv:pylint]
description = "Lint code using pylint"
commands =
  pylint --rcfile=tox.ini petri

[testenv:mypy]
description = "Lint code using mypy"
commands =
  mypy --config-file=tox.ini -p petri

[testenv:bandit]
description = "Lint code using bandit"
commands =
  bandit \
    --ini=tox.ini \
    --quiet \
    --recursive \
    -x **/.venv/**/*.py \
    petri

[testenv:lint]
description = "Lint code using bandit"
commands =
  tox -e flake8
  tox -e pylint
  tox -e mypy
  tox -e bandit

[testenv:TODO]
description = "Lint code using flake8,pylint,mypy,bandit linter"
commands =
  - pylint \
    --disable=all \
    --enable=W0511 \
    --notes=WTF,FIXME,TODO,BUG,NOBUG,REQ,RFE,IDEA,ALERT,HACK,PORT,CAVEAT,NOTE,REF,TODOC,CRED \
    petri

[testenv:formattest]
description = "Reformat testing code using autopep8,black formatter(s)"
commands =
  autopep8 tests
  black tests
todo = remove

[testenv:linttest]
description = "Lint test code using flake8,pylint,mypy,bandit linter(s)"
commands =
  flake8 --config=tox.ini tests
  pylint --rcfile=tox.ini tests \
    --disable=C011
  mypy --config-file=tox.ini -p tests
  bandit \
    --ini=tox.ini \
    --quiet \
    --recursive \
    -x **/.venv/**/*.py \
    tests



[testenv:unit]
description = "Run unit tests"
envdir = {toxinidir}/.unit.venv
deps =
    pytest
    pytest-cov
    -rrequirements.txt
setenv =
    COVERAGE_FILE = .coverage.unit
commands =
  pytest {posargs} -v --tb=short -ra --cov=petri tests/unit

[testenv:coverage]
description = "Report Coverage results by aggregating tests results"
commands =
  - python -c \
    "from pathlib import Path ;" \
    "Path('.coverage').unlink()"
  - coverage combine -a .coverage.unit
  coverage html -d docs/build/coverage
  coverage xml
todo = remove

[testenv:testcode]
description = "run all project code test suite"
commands =
  tox -e unit
  tox -e coverage

[testenv:docs]
description = "Create&test project documentation"
setenv =
  ENV = development
commands =
  sphinx-build \
    -Q \
    -d "{toxinidir}/docs/build/.doctrees" \
    --color \
    -E \
    -a \
    -bhtml \
    "{toxinidir}/docs/source" \
    "{toxinidir}/docs/build"
  doc8 -q "{toxinidir}/docs"
todo = remove

[testenv:reqs]
description = "Export requiremets.txt"
commands =
  poetry export --dev --format requirements.txt -o requirements.dev.txt
  poetry export --format requirements.txt -o requirements.txt


[testenv:docker]
description = "Run tests using docker"
whitelist_externals = docker-compose
changedir = docker
commands =
    docker-compose down -v
    docker-compose build --no-cache publisher
    docker-compose build --no-cache a_pkg
    docker-compose build --no-cache second_order
    docker-compose up publisher
    docker-compose up a_pkg
    docker-compose up second_order


[testenv:pub]
description = "publish package"
commands =
  poetry version prepatch
  poetry publish --username pwoolvett --password \{SHA\}/r3LulSjDHK25EYop+KByZcPdes= --build --repository test
