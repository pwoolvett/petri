#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Clear dev stuff"""

from logging import warning
from pathlib import Path
from shutil import rmtree

from contextlib import contextmanager

DEFAULT_GLOBS = {
    "docs/source/**/*.rst",
    "docs/build/**/*.*",
    ".mypy_cache",
    "poetry.lock",
    "requirements*.txt",
    "poetry.lock",
    "setup.py",
    ".tox",
    ".coverage",
    "coverage.xml",
    "test-results.xml",
    "petri.egg-info",
    "dist",
    "logs/**/*.*",
    "**/__pycache__",
    "**/pip-wheel-metadata",
    "**/hermes.egg-info",
    "**/.pytest_cache",
}


def rm(path):
    if path.is_file():
        path.unlink()
    elif path.is_dir():
        rmtree(path)
    else:
        warning("%s neither file nor dir", path)
        return 1
    return 0


def rm_glob(globs):
    warns = 0
    for glob in globs:
        warns += rm(glob)
    return warns

@contextmanager
def install_fire():
    import subprocess
    import sys

    try:
        subprocess.check_call(
            [sys.executable, "-m", "pip", "install", "-q", "fire==0.2.1"]
        )
        yield
    finally:
        subprocess.check_call(
            [sys.executable, "-m", "pip", "uninstall", "--yes", "-q", "fire"]
        )



def main(current_dir=None, extra_globs=None, exclude_globs=None):
    current_dir = current_dir or Path(".").resolve()
    extra_globs = extra_globs or set()
    exclude_globs = exclude_globs or set()

    glob = current_dir.glob
    paths = (DEFAULT_GLOBS | extra_globs) - exclude_globs

    warns = 0
    for path in paths:
        warns += rm_glob(glob(path))
    return warns


if __name__ == "__main__":
    with install_fire():
        from fire import Fire
        Fire(main)
